using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Configuration;

namespace File_Encryption {
	
	public class Sebas : Crypter {
		
		private string message;
		private int[,] list;
		private char[] chars;
		private string path;
		private int size;
		
		public Sebas(bool isfile, string fileOrMessage, string savePath) : base("png", "Sebas", fileOrMessage) {
			this.init();
			if (isfile) {
				path = fileOrMessage;
				message = "";
				return;
			}

			this.message = fileOrMessage;
			
			this.size = (int) Math.Sqrt(message.Length) + 1;
			log("What would you like to name the file? (do not include the .png, we'll add it for you!)");
			var fileName = Console.ReadLine() + ".png";
			path = System.IO.Path.Combine(savePath, fileName);
		}

		private void init() {
			this.chars = new char[] {
				'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
				'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
				'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
				'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
				' ', '.', ',', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				';', '\'', '-', ':', '\n', '	', '!', '*', '\"', '\\', '/',
			};
			this.list = new int[chars.Length,3];
			for (var i = 0; i < chars.Length; i++) {
				list[i, 0] = i;
				list[i, 1] = i;
				list[i, 2] = i;
			}
			//all the letters that correspond with the colors
		}

		public override string encryptFile() {
			var bmp = new Bitmap(this.size, this.size);
			var atchar = -1;
			for (var col = 0; col < size; col++) {
				for (var row = 0; row < size; row++) {
					atchar++;
					bmp.SetPixel(row, col, atchar < message.Length
						? getColorforChar(message.ToCharArray()[atchar])
						: getColorforChar(' '));
				}
			}
			bmp.Save(path, ImageFormat.Png);
			bmp.Dispose();
			return path;
		}

		public override string decryptFile(string input) {
			var final = "";
			if (string.IsNullOrEmpty(input)) input = this.path;
			
			var dummy = Image.FromFile(input);
			var tempPath = input.Substring(input.Length - 5);
			tempPath += ".bmp";
			dummy.Save(tempPath, ImageFormat.Bmp);

			var bmp = new Bitmap(tempPath);
			for (var col = 0; col < bmp.Height; col++)
			for (var row = 0; row < bmp.Width; row++)
				final += getCharforColor(bmp.GetPixel(row, col));
			
			bmp.Dispose();
			System.IO.File.Delete(tempPath); // remove the created BMP
			
			return final;
		}

		private char getCharforColor(Color inputColor) {
			int red = inputColor.R, green = inputColor.G, blue = inputColor.B;
			for (var i = 0; i < this.list.Length; i++)
				if (this.list[i, 0] == red && this.list[i, 1] == green && this.list[i, 2] == blue)
					return this.chars[i];
					
			return '~';
		}

		private Color getColorforChar(char c) {
			var charPosition = -1;
			for(var i = 0; i < this.chars.Length; i++)
				if (c == this.chars[i]) {
					charPosition = i;
					break;
				}

			if (charPosition != -1)
				return Color.FromArgb(this.list[charPosition, 0], this.list[charPosition, 1],
					this.list[charPosition, 2]);
			
			log($"Unknown char \'{c}\' make sure you are only using lowercase & numbers.");
			return Color.FromArgb(255,255,255);

		}
		
	}
	
}
