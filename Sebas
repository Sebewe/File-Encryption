using System;
using System.Drawing;
using System.Drawing.Imaging;

namespace File_Encryption {
	
	public class Sebas{
		
		private int[,] colorList;
		private char[] chars;
		private string path;
		private int size;
		private readonly Random random;
		
		public Sebas() { // has been reformatted
			this.random = new Random();
			this.init();
		}
		
		private static void log(string input) { //has been added since we no longer extend
			Console.WriteLine($"Sebas: {input}");
		}

		private void init() { //has been reformatted
			this.chars = new char[] {
				'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
				'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
				'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
				'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
				' ', '.', ',', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
				';', '\'', '-', ':', '\n', '\t', '!', '*', '\\', '?', '"', '#',
				'(', ')', '$', '/', '[', ']', '\r',
			};
			this.colorList = new int[chars.Length,3];
			for (var i = 0; i < chars.Length; i++) {
				colorList[i, 0] = random.Next(256);
				colorList[i, 1] = random.Next(256);
				colorList[i, 2] = random.Next(256);
			}
			//all the letters that correspond with the colors
		}

		public string encryptFile(string inputText) { // has been reformatted
			var bmp = new Bitmap((int) Math.Sqrt(inputText.Length) + 1, (int) Math.Sqrt(inputText.Length) + 1);
			var atChar = -1;
			var charArray = inputText.ToCharArray();
			for (var col = 0; col < size; col++) {
				for (var row = 0; row < size; row++) {
					atChar++;
					bmp.SetPixel(row, col, atChar < inputText.Length
						? getColorForChar(charArray[atChar])
						: getColorForChar(' '));
				}
			}
			log("Please tell me the full path of where you would like to save the file (I'll add the .png)");
			bmp.Save(Console.ReadLine()+".png", ImageFormat.Png);
			bmp.Dispose();
			return path;
		}

		public string decryptFile(string inputPath) { //working on reformatting
			var final = "";
			
			var dummy = Image.FromFile(inputPath);
			var tempPath = inputPath.Substring(inputPath.Length - 5);
			tempPath += ".bmp";
			dummy.Save(tempPath, ImageFormat.Bmp);
			dummy.Dispose();

			var bmp = new Bitmap(tempPath);
			for (var col = 0; col < bmp.Height; col++)
			for (var row = 0; row < bmp.Width; row++)
				final += getCharForColor(bmp.GetPixel(row, col));
			
			bmp.Dispose();
			System.IO.File.Delete(tempPath); // remove the created BMP
			
			log("Would you like to write this data to a txt file? (yes/no)");
			if (Console.ReadLine().Equals("no")) return final;
			log("Please tell me the full path of where you'd like to put the file, with the new name included" +
			    " (I'll add the .txt)");
			System.IO.File.WriteAllText(Console.ReadLine()+".txt", final);
			return final;
		}

		private char getCharForColor(Color inputColor) {
			int red = inputColor.R, green = inputColor.G, blue = inputColor.B;
			for (var i = 0; i < this.colorList.Length; i++) {
				log(i.ToString());
				if (this.colorList[i, 0] == red && this.colorList[i, 1] == green && this.colorList[i, 2] == blue)
					return this.chars[i];
			}

			return '~';
		}

		private Color getColorForChar(char inputChar) {
			var charPosition = -1;
			for(var i = 0; i < this.chars.Length; i++)
				if (inputChar == this.chars[i]) {
					charPosition = i;
					break;
				}

			if (charPosition != -1)
				return Color.FromArgb(this.colorList[charPosition, 0], this.colorList[charPosition, 1],
					this.colorList[charPosition, 2]);
			
			log($"{inputChar}");
			return Color.FromArgb(999,999,999,999);
		}
		
	}
	
}
