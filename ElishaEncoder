using System;
using System.Drawing;
using System.Drawing.Imaging;

namespace Stenography2._0
{

    public class Encoder
    {
        private readonly string imagePath;
        private readonly string inputText;
        private readonly string outputPath;
        private readonly bool what;



        public Encoder(string imagePath, string inputText, string outputPath)
        {
            this.imagePath = imagePath;
            this.inputText = inputText;
            this.outputPath = outputPath;
            //this.Encoderq();
            //this.Check();

            Bitmap img = new Bitmap(this.imagePath);

            for (int i = 0; i < img.Width; i++)
            {
                for (int j = 0; j < img.Height; j++)
                {
                    Color pixel = img.GetPixel(i, j);

                    if (i < 1 && j < this.inputText.Length)
                    {
                        Console.WriteLine("R = [" + i + "][" + j + "] = " + pixel.R);
                        Console.WriteLine("G = [" + i + "][" + j + "] = " + pixel.G);
                        Console.WriteLine("B = [" + i + "][" + j + "] = " + pixel.B);

                        var letter = Convert.ToChar(this.inputText.Substring(j, 1));
                        var value = Convert.ToInt32(letter);
                        Console.WriteLine("letter : " + letter + " value : " + value);

                        img.SetPixel(i, j, Color.FromArgb(pixel.R, pixel.G, value));
                    }

                    if (i == img.Width - 1 && j == img.Height - 1)
                    {
                        img.SetPixel(i, j, Color.FromArgb(pixel.R, pixel.G, this.inputText.Length));
                        
                    }
                }
            }

            this.outputPath = "stego";
            var name = this.outputPath;
            img.Save(name, ImageFormat.Bmp);   
        }

       
    }
}
